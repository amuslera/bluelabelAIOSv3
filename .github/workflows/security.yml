name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Install project dependencies
      run: |
        # Install from pyproject.toml if it exists
        if [ -f "pyproject.toml" ]; then
          pip install -e .
        fi
        
    - name: Run pip-audit
      run: |
        # Only run pip-audit if there are dependencies installed
        if pip list --format=freeze | grep -v "^pip=\|^setuptools=\|^wheel=" > /dev/null; then
          pip-audit --desc --format=json --output=pip-audit.json || true
          pip-audit --desc || true
        else
          echo "No dependencies to audit"
          echo "[]" > pip-audit.json
        fi
        
    - name: Run safety check
      run: |
        # Only run safety if there are dependencies
        if pip list --format=freeze | grep -v "^pip=\|^setuptools=\|^wheel=" > /dev/null; then
          safety check --json --output safety-report.json || true
          safety check || true
        else
          echo "No dependencies to check"
          echo "[]" > safety-report.json
        fi
        
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          pip-audit.json
          safety-report.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install detect-secrets
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets
        
    - name: Run detect-secrets
      run: |
        # Create or update the baseline
        detect-secrets scan --baseline .secrets.baseline --all-files || detect-secrets scan --all-files > .secrets.baseline
        
    - name: Verify secrets baseline
      run: |
        # Check if there are any unaudited secrets
        if detect-secrets audit .secrets.baseline --report; then
          echo "No unaudited secrets found"
        else
          echo "Warning: Potential secrets detected. Please review."
          # Don't fail the build for now, just warn
          exit 0
        fi