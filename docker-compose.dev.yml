services:
  # Main application development container
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: aiosv3-app-dev
    ports:
      - "8000:8000"  # FastAPI
      - "5678:5678"  # Debug port
    volumes:
      - .:/workspace
      - /workspace/venv  # Exclude venv from volume mount
    environment:
      - PYTHONPATH=/workspace
      - ENVIRONMENT=development
      - DEBUG=true
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    depends_on:
      - rabbitmq
      - minio
      - redis
      - qdrant
    networks:
      - aiosv3-network
    restart: unless-stopped

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: aiosv3-rabbitmq-dev
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=aiosv3
      - RABBITMQ_DEFAULT_PASS=dev_password
      - RABBITMQ_DEFAULT_VHOST=aiosv3
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - aiosv3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: aiosv3-minio-dev
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    environment:
      - MINIO_ROOT_USER=aiosv3
      - MINIO_ROOT_PASSWORD=dev_password_123
      - MINIO_DEFAULT_BUCKETS=workspaces,artifacts,logs
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - aiosv3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: aiosv3-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aiosv3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: aiosv3-qdrant-dev
    ports:
      - "6333:6333"   # HTTP API
      - "6334:6334"   # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - aiosv3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: aiosv3-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - aiosv3-network
    restart: unless-stopped
    depends_on:
      - app

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aiosv3-grafana-dev
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=dev_password
    volumes:
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - aiosv3-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  rabbitmq_data:
  minio_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:

networks:
  aiosv3-network:
    driver: bridge